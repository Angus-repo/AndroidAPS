name: AAPS CI

on:
  workflow_dispatch:
    inputs:
      buildVariant:
        description: 'Select Build Variant'
        required: true
        default: 'FullRelease'
        type: choice
        options:
          - FullRelease
          - FullDebug
          - aapsclientRelease
          - aapsclientDebug
          - aapsclient2Release
          - aapsclient2Debug
          - pumpcontrolRelease
          - pumpcontrolDebug

jobs:
  build:
    name: Build AAPS
    runs-on: ubuntu-latest
    steps:
      - name: Decode keystore
        run: |
          mkdir -p "$RUNNER_TEMP/keystore"
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > "$RUNNER_TEMP/keystore/keystore.jks"

      - name: Check Secrets
        run: |
          echo "üîç Checking required secrets..."

          MISSING=0

          check_secret() {
            if [ -z "$1" ]; then
              echo "‚ùå Missing secret: $2"
              MISSING=1
            fi
          }

          # Check keystore secrets
          check_secret "${{ secrets.KEYSTORE_BASE64 }}" "KEYSTORE_BASE64"
          check_secret "${{ secrets.KEYSTORE_PASSWORD }}" "KEYSTORE_PASSWORD"
          check_secret "${{ secrets.KEY_ALIAS }}" "KEY_ALIAS"
          check_secret "${{ secrets.KEY_PASSWORD }}" "KEY_PASSWORD"

          check_secret "${{ secrets.GDRIVE_CLIENT_ID }}" "GDRIVE_CLIENT_ID"
          check_secret "${{ secrets.GDRIVE_CLIENT_SECRET }}" "GDRIVE_CLIENT_SECRET"
          check_secret "${{ secrets.GDRIVE_REFRESH_TOKEN }}" "GDRIVE_REFRESH_TOKEN"

          if [ "$MISSING" -eq 1 ]; then
            echo "üõë One or more required secrets are missing. Stopping build."
            exit 1
          fi
          
          echo "‚úÖ All required secrets are present."

          echo "üîê Validating alias and key password..."
  
          KEYTOOL_LOG=$(mktemp)
          
          if ! keytool -list \
            -alias "${{ secrets.KEY_ALIAS }}" \
            -keystore "$RUNNER_TEMP/keystore/keystore.jks" \
            -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
            -keypass "${{ secrets.KEY_PASSWORD }}" > /dev/null 2> "$KEYTOOL_LOG"; then
            echo "‚ùå jks or KEY_ALIAS or KEY_PASSWORD or KEYSTORE_PASSWORD incorrect!"
            echo "üîç keytool error output:"
            cat "$KEYTOOL_LOG"
            rm -f "$KEYTOOL_LOG"
            exit 1
          fi
          
          rm -f "$KEYTOOL_LOG"

          echo "‚úÖ Keystore, alias, and key password are all valid."
      - name: Retrieving Google Drive access token
        env:
          CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.GDRIVE_REFRESH_TOKEN }}
        run: |
          echo "üîê Reveiceing Google OAuth2 access token..."
          TOKEN_RESPONSE=$(curl -s -X POST https://oauth2.googleapis.com/token \
            -d client_id="$CLIENT_ID" \
            -d client_secret="$CLIENT_SECRET" \
            -d refresh_token="$REFRESH_TOKEN" \
            -d grant_type=refresh_token)
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r .access_token)
          echo "::add-mask::$ACCESS_TOKEN"
          
          if [ "$ACCESS_TOKEN" == "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "‚ùå Failed to retrieve Google access token!"
            echo "$TOKEN_RESPONSE"
            exit 1
          fi
          
          echo "GDRIVE_ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
          
          echo "‚úÖ Google OAuth2 access token retrieved and stored."

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set BUILD_VARIANT
        run: |
          BUILD_VARIANT="${{ github.event.inputs.buildVariant }}"
          echo "BUILD_VARIANT=$BUILD_VARIANT" >> $GITHUB_ENV
          echo "Selected BUILD_VARIANT: $BUILD_VARIANT"

          VARIANT_FLAVOR=$(echo "$BUILD_VARIANT" | sed -E 's/(Release|Debug)$//' | tr '[:upper:]' '[:lower:]')
          VARIANT_TYPE=$(echo "$BUILD_VARIANT" | grep -oE '(Release|Debug)$' | tr '[:upper:]' '[:lower:]')

          echo "VARIANT_FLAVOR=$VARIANT_FLAVOR" >> $GITHUB_ENV
          echo "VARIANT_TYPE=$VARIANT_TYPE" >> $GITHUB_ENV
          echo "VARIANT_FLAVOR: $VARIANT_FLAVOR"
          echo "VARIANT_TYPE: $VARIANT_TYPE"

          VERSION_SUFFIX=""
          if [[ "$VARIANT_FLAVOR" != "full" ]]; then
            VERSION_SUFFIX="$VARIANT_FLAVOR"
          fi
          if [[ "$VARIANT_TYPE" == "debug" ]]; then
            VERSION_SUFFIX="$VERSION_SUFFIX-debug"
          fi
          if [[ -n "$VERSION_SUFFIX" && "$VERSION_SUFFIX" != -* ]]; then
            VERSION_SUFFIX="-$VERSION_SUFFIX"
          fi
          echo "VERSION_SUFFIX=$VERSION_SUFFIX" >> $GITHUB_ENV
          echo "VERSION_SUFFIX: $VERSION_SUFFIX"

      - name: Extract VERSION
        run: |
          BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
          if echo "$BRANCH_NAME" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$'; then
            VERSION="$BRANCH_NAME"
            echo "üî¢ Using branch version as version: $BRANCH_NAME"
          else
            VERSION=$(grep 'val appVersion' buildSrc/src/main/kotlin/Versions.kt | awk -F '"' '{print $2}')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION: $VERSION"

      - name: Map JDK version by app version
        run: |
          case "$VERSION" in
            3.1.0.3) JDK_VERSION="17" ;;
            3.2.0.4) JDK_VERSION="19" ;;
            3.3.*) JDK_VERSION="21" ;;
            *)
              echo "‚ùå Unsupported app version: $VERSION"
              exit 1
              ;;
          esac
          echo "JDK_VERSION=$JDK_VERSION" >> $GITHUB_ENV
          echo "üì¶ App Version: $VERSION ‚Üí JDK Version: $JDK_VERSION"
          echo "jdk_version=$JDK_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build APKs
        run: |
          ./gradlew assemble${{ env.BUILD_VARIANT }} \
          -Pandroid.injected.signing.store.file="$RUNNER_TEMP/keystore/keystore.jks" \
          -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
          -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
          -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Rename APKs with version
        run: |
          mv app/build/outputs/apk/${{ env.VARIANT_FLAVOR }}/${{ env.VARIANT_TYPE }}/*.apk \
            aaps-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk

          mv wear/build/outputs/apk/${{ env.VARIANT_FLAVOR }}/${{ env.VARIANT_TYPE }}/*.apk \
            aaps-wear-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk

      - name: Upload APKs to Google Drive
        env:
          CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.GDRIVE_REFRESH_TOKEN }}
          VERSION: ${{ env.VERSION }}
          VERSION_SUFFIX: ${{ env.VERSION_SUFFIX }}
        run: |
          set -e
          echo "üîê Upload Google Drive..."

          echo "üìÅ Checking or creating folder: AAPS"
          AAPS_FOLDER_ID=$(curl -s -X GET \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://www.googleapis.com/drive/v3/files?q=name='AAPS'+and+mimeType='application/vnd.google-apps.folder'+and+trashed=false" \
            | jq -r '.files[0].id')

          if [ "$AAPS_FOLDER_ID" == "null" ] || [ -z "$AAPS_FOLDER_ID" ]; then
            AAPS_FOLDER_ID=$(curl -s -X POST \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{"name": "AAPS", "mimeType": "application/vnd.google-apps.folder"}' \
              "https://www.googleapis.com/drive/v3/files" | jq -r '.id')
            echo "üìÇ Created AAPS folder: $AAPS_FOLDER_ID"
          else
            echo "üìÇ Found AAPS folder: $AAPS_FOLDER_ID"
          fi

          echo "üìÅ Checking or creating folder: $VERSION under AAPS"
          VERSION_FOLDER_ID=$(curl -s -X GET \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://www.googleapis.com/drive/v3/files?q=name='${VERSION}'+and+mimeType='application/vnd.google-apps.folder'+and+'$AAPS_FOLDER_ID'+in+parents+and+trashed=false" \
            | jq -r '.files[0].id')

          if [ "$VERSION_FOLDER_ID" == "null" ] || [ -z "$VERSION_FOLDER_ID" ]; then
            VERSION_FOLDER_ID=$(curl -s -X POST \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"name\": \"${VERSION}\", \"mimeType\": \"application/vnd.google-apps.folder\", \"parents\": [\"$AAPS_FOLDER_ID\"]}" \
              "https://www.googleapis.com/drive/v3/files" | jq -r '.id')
            echo "üìÇ Created version folder: $VERSION_FOLDER_ID"
          else
            echo "üìÇ Found version folder: $VERSION_FOLDER_ID"
          fi

          upload_to_gdrive() {
            FILE=$1
            NAME=$2

            if [ ! -f "$FILE" ]; then
              echo "‚ùå File not found: $FILE"
              exit 26
            fi
          
            FILE_ID=$(curl -s \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              "https://www.googleapis.com/drive/v3/files?q=name='${NAME}' and '${VERSION_FOLDER_ID}' in parents and trashed=false&fields=files(id)" | jq -r '.files[0].id')
          
            if [[ "$FILE_ID" != "null" ]]; then
            curl -s -X DELETE \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
                "https://www.googleapis.com/drive/v3/files/${FILE_ID}"
            fi

            echo "‚¨ÜÔ∏è Uploading $FILE to Google Drive as $NAME..."
            RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/gdrive_response.json \
              -X POST \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -F "metadata={\"name\":\"$NAME\", \"parents\":[\"$VERSION_FOLDER_ID\"]};type=application/json;charset=UTF-8" \
              -F "file=@$FILE;type=application/vnd.android.package-archive" \
              "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart")

            HTTP_CODE="${RESPONSE: -3}"
            if [[ "$HTTP_CODE" != "200" && "$HTTP_CODE" != "201" ]]; then
              echo "‚ùå Upload failed with HTTP status: $HTTP_CODE"
              echo "üîç Response:"
              cat /tmp/gdrive_response.json
              exit 1
            fi
            echo "‚úÖ Upload successful: $NAME"
          }

          upload_to_gdrive "aaps-${VERSION}${VERSION_SUFFIX}.apk" "aaps-${VERSION}${VERSION_SUFFIX}.apk"
          upload_to_gdrive "aaps-wear-${VERSION}${VERSION_SUFFIX}.apk" "aaps-wear-${VERSION}${VERSION_SUFFIX}.apk"