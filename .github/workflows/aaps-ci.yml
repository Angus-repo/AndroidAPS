name: AAPS CI

on:
  workflow_dispatch:
    inputs:
      buildVariant:
        description: 'Select Build Variant'
        required: true
        default: 'FullRelease'
        type: choice
        options:
          - FullRelease
          - FullDebug
          - aapsclientRelease
          - aapsclientDebug
          - aapsclient2Release
          - aapsclient2Debug
          - pumpcontrolRelease
          - pumpcontrolDebug

jobs:
  build:
    name: Build AAPS
    runs-on: ubuntu-latest
    steps:
      - name: Decode keystore
        run: |
          mkdir -p "$RUNNER_TEMP/keystore"
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > "$RUNNER_TEMP/keystore/keystore.jks"

      - name: Decode GDrive OAuth2 secrets
        run: |
          if [ -n "${{ secrets.GDRIVE_OAUTH2 }}" ]; then
            echo "üîê Decoding GDRIVE_OAUTH2..."
            DECODED=$(echo "${{ secrets.GDRIVE_OAUTH2 }}" | base64 -d)

            GDRIVE_CLIENT_ID=$(echo "$DECODED" | cut -d'|' -f1)
            GDRIVE_REFRESH_TOKEN=$(echo "$DECODED" | cut -d'|' -f2)

            echo "GDRIVE_CLIENT_ID=$GDRIVE_CLIENT_ID" >> $GITHUB_ENV
            echo "GDRIVE_REFRESH_TOKEN=$GDRIVE_REFRESH_TOKEN" >> $GITHUB_ENV

            echo "‚úÖ GDRIVE_CLIENT_ID and GDRIVE_REFRESH_TOKEN extracted from GDRIVE_OAUTH2"
          else
            echo "‚ÑπÔ∏è GDRIVE_OAUTH2 not provided, using separate secrets."
            echo "GDRIVE_CLIENT_ID=${{ secrets.GDRIVE_CLIENT_ID }}" >> $GITHUB_ENV
            echo "GDRIVE_REFRESH_TOKEN=${{ secrets.GDRIVE_REFRESH_TOKEN }}" >> $GITHUB_ENV
          fi

      - name: Check Secrets
        run: |
          echo "üîç Checking required secrets..."

          MISSING=0

          check_secret() {
            if [ -z "$1" ]; then
              echo "‚ùå Missing secret: $2"
              MISSING=1
            fi
          }

          # Check keystore secrets
          check_secret "${{ secrets.KEYSTORE_BASE64 }}" "KEYSTORE_BASE64"
          check_secret "${{ secrets.KEYSTORE_PASSWORD }}" "KEYSTORE_PASSWORD"
          check_secret "${{ secrets.KEY_ALIAS }}" "KEY_ALIAS"
          check_secret "${{ secrets.KEY_PASSWORD }}" "KEY_PASSWORD"

          # Conditionally check GDrive secrets
          if [ -z "${{ secrets.GDRIVE_OAUTH2 }}" ]; then
            check_secret "${{ secrets.GDRIVE_CLIENT_ID }}" "GDRIVE_CLIENT_ID"
            check_secret "${{ secrets.GDRIVE_REFRESH_TOKEN }}" "GDRIVE_REFRESH_TOKEN"
          else
            echo "‚ÑπÔ∏è GDRIVE_OAUTH2 is set, skipping GDRIVE_CLIENT_ID and GDRIVE_REFRESH_TOKEN check."
          fi

          if [ "$MISSING" -eq 1 ]; then
            echo "üõë One or more required secrets are missing. Stopping build."
            exit 1
          fi
          
          echo "‚úÖ All required secrets are present."

      - name: Validating keystore, alias and password
        run: |
          echo "üîê Validating keystore, alias and password"

          KEYTOOL_LOG=$(mktemp)

          if ! keytool -list \
              -alias "${{ secrets.KEY_ALIAS }}" \
              -keystore "$RUNNER_TEMP/keystore/keystore.jks" \
              -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
              -keypass "${{ secrets.KEY_PASSWORD }}" > /dev/null 2> "$KEYTOOL_LOG"; then
            echo "‚ùå KEYSTORE_BASE64 or KEY_ALIAS or KEY_PASSWORD or KEYSTORE_PASSWORD incorrect!"
            echo "üîç keytool error output:"
            cat "$KEYTOOL_LOG"
            rm -f "$KEYTOOL_LOG"
            exit 1
          fi

          rm -f "$KEYTOOL_LOG"

          echo "‚úÖ Keystore, alias, and key password are all valid."

      - name: Retrieving Google Drive access token
        run: |
          echo "üîê Receiving Google OAuth2 access token using refresh token..."

          if [ -z "$GDRIVE_CLIENT_ID" ] || [ -z "$GDRIVE_REFRESH_TOKEN" ]; then
            echo "‚ùå GDRIVE_CLIENT_ID or GDRIVE_REFRESH_TOKEN is missing!"
            exit 1
          fi

          TOKEN_RESPONSE=$(curl -s -X POST https://oauth2.googleapis.com/token \
            -d client_id="$GDRIVE_CLIENT_ID" \
            -d refresh_token="$GDRIVE_REFRESH_TOKEN" \
            -d grant_type=refresh_token)
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r .access_token)
          echo "::add-mask::$ACCESS_TOKEN"
          
          if [ "$ACCESS_TOKEN" == "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "‚ùå Failed to retrieve Google access token!"
            echo "$TOKEN_RESPONSE"
            exit 1
          fi
          
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
          
          echo "‚úÖ Google OAuth2 access token retrieved and stored."

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set BUILD_VARIANT
        run: |
          BUILD_VARIANT="${{ github.event.inputs.buildVariant }}"
          echo "BUILD_VARIANT=$BUILD_VARIANT" >> $GITHUB_ENV
          echo "Selected BUILD_VARIANT: $BUILD_VARIANT"

          VARIANT_FLAVOR=$(echo "$BUILD_VARIANT" | sed -E 's/(Release|Debug)$//' | tr '[:upper:]' '[:lower:]')
          VARIANT_TYPE=$(echo "$BUILD_VARIANT" | grep -oE '(Release|Debug)$' | tr '[:upper:]' '[:lower:]')

          echo "VARIANT_FLAVOR=$VARIANT_FLAVOR" >> $GITHUB_ENV
          echo "VARIANT_TYPE=$VARIANT_TYPE" >> $GITHUB_ENV

          VERSION_SUFFIX=""
          if [[ "$VARIANT_FLAVOR" != "full" ]]; then
            VERSION_SUFFIX="$VARIANT_FLAVOR"
          fi
          if [[ "$VARIANT_TYPE" == "debug" ]]; then
            VERSION_SUFFIX="$VERSION_SUFFIX-debug"
          fi
          if [[ -n "$VERSION_SUFFIX" && "$VERSION_SUFFIX" != -* ]]; then
            VERSION_SUFFIX="-$VERSION_SUFFIX"
          fi
          echo "VERSION_SUFFIX=$VERSION_SUFFIX" >> $GITHUB_ENV

      - name: Extract VERSION
        run: |
          BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
          if echo "$BRANCH_NAME" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$'; then
            VERSION="$BRANCH_NAME"
          else
            VERSION=$(grep 'val appVersion' buildSrc/src/main/kotlin/Versions.kt | awk -F '"' '{print $2}')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Map JDK version by app version
        run: |
          case "$VERSION" in
            3.1.0.3) JDK_VERSION="17" ;;
            3.2.0.4) JDK_VERSION="19" ;;
            3.3.*) JDK_VERSION="21" ;;
            *)
              echo "‚ùå Unsupported app version: $VERSION"
              exit 1
              ;;
          esac
          echo "JDK_VERSION=$JDK_VERSION" >> $GITHUB_ENV
          echo "jdk_version=$JDK_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build APKs
        run: |
          ./gradlew assemble${{ env.BUILD_VARIANT }} \
          -Pandroid.injected.signing.store.file="$RUNNER_TEMP/keystore/keystore.jks" \
          -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
          -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
          -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Rename APKs with version
        run: |
          mv app/build/outputs/apk/${{ env.VARIANT_FLAVOR }}/${{ env.VARIANT_TYPE }}/*.apk \
            aaps-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk

          mv wear/build/outputs/apk/${{ env.VARIANT_FLAVOR }}/${{ env.VARIANT_TYPE }}/*.apk \
            aaps-wear-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk

      - name: Upload APKs to Google Drive
        run: |
          set -e
          echo "üîê Upload Google Drive..."

          # (‰ª•‰∏ãÁï•ÔºåËàá‰Ω†ÂéüÊú¨ÁöÑ Upload APKs to Google Drive Áõ∏Âêå)