name: AAPS CI

on:
  workflow_dispatch:
    inputs:
      buildVariant:
        description: 'Select Build Variant'
        required: true
        default: 'FullRelease'
        type: choice
        options:
          - FullRelease
          - FullDebug
          - aapsclientRelease
          - aapsclientDebug
          - aapsclient2Release
          - aapsclient2Debug
          - pumpcontrolRelease
          - pumpcontrolDebug
      uploadTarget:
        description: 'Select Upload Target'
        required: true
        default: 'artifacts'
        type: choice
        options:
          - google-drive
          - dropbox
          - artifacts

jobs:
  build:
    name: Build AAPS
    runs-on: ubuntu-latest
    steps:
      - name: Check Secrets
        run: |
          MISSING=0
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "‚ùå Missing secret: KEYSTORE_BASE64"
            MISSING=1
          fi
          if [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ]; then
            echo "‚ùå Missing secret: KEYSTORE_PASSWORD"
            MISSING=1
          fi
          if [ -z "${{ secrets.KEY_ALIAS }}" ]; then
            echo "‚ùå Missing secret: KEY_ALIAS"
            MISSING=1
          fi
          if [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "‚ùå Missing secret: KEY_PASSWORD"
            MISSING=1
          fi
          if [ "${{ github.event.inputs.uploadTool }}" = "dropbox" ]; then
            if [ -z "${{ secrets.DROPBOX_ACCESS_TOKEN }}" ]; then
              echo "‚ùå Missing secret: DROPBOX_ACCESS_TOKEN (required for Dropbox upload)"
              echo ""
              echo "üîß Please create an app and generate a token at:"
              echo "üëâ https://www.dropbox.com/developers/apps"
              echo ""
              echo "üìò For detailed instructions, see:"
              echo "üîó https://androidaps.readthedocs.io/en/latest/SettingUpAaps/BuildingAaps.html#upload-to-dropbox"
              MISSING=1
            fi
          fi
          if [ "$MISSING" -eq 1 ]; then
            echo "üõë One or more required secrets are missing. Failing the build."
            exit 1
          fi

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set BUILD_VARIANT
        run: |
          BUILD_VARIANT="${{ github.event.inputs.buildVariant }}"
          echo "BUILD_VARIANT=$BUILD_VARIANT" >> $GITHUB_ENV
          echo "Selected BUILD_VARIANT: $BUILD_VARIANT"

          VARIANT_FLAVOR=$(echo "$BUILD_VARIANT" | sed -E 's/(Release|Debug)$//' | tr '[:upper:]' '[:lower:]')
          VARIANT_TYPE=$(echo "$BUILD_VARIANT" | grep -oE '(Release|Debug)$' | tr '[:upper:]' '[:lower:]')

          echo "VARIANT_FLAVOR=$VARIANT_FLAVOR" >> $GITHUB_ENV
          echo "VARIANT_TYPE=$VARIANT_TYPE" >> $GITHUB_ENV
          echo "VARIANT_FLAVOR: $VARIANT_FLAVOR"
          echo "VARIANT_TYPE: $VARIANT_TYPE"

          VERSION_SUFFIX=""
          if [[ "$VARIANT_FLAVOR" != "full" ]]; then
            VERSION_SUFFIX="$VARIANT_FLAVOR"
          fi
          if [[ "$VARIANT_TYPE" == "debug" ]]; then
            VERSION_SUFFIX="$VERSION_SUFFIX-debug"
          fi
          if [[ -n "$VERSION_SUFFIX" && "$VERSION_SUFFIX" != -* ]]; then
            VERSION_SUFFIX="-$VERSION_SUFFIX"
          fi
          echo "VERSION_SUFFIX=$VERSION_SUFFIX" >> $GITHUB_ENV
          echo "VERSION_SUFFIX: $VERSION_SUFFIX"

      - name: Extract VERSION_NAME for App and Wear
        run: |
          BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
          if echo "$BRANCH_NAME" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$'; then
            VERSION="$BRANCH_NAME"
            echo "üî¢ Using branch version as version: $BRANCH_NAME"
          else
            VERSION=$(grep 'val appVersion' buildSrc/src/main/kotlin/Versions.kt | awk -F '"' '{print $2}')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION: $VERSION"

      - name: Map JDK version by app version
        run: |
          case "$VERSION" in
            2.6.2) JDK_VERSION="11" ;;
            2.8.2.1) JDK_VERSION="11" ;;
            3.1.0.3) JDK_VERSION="17" ;;
            3.2.0.4) JDK_VERSION="19" ;;
            3.3.*) JDK_VERSION="21" ;;
            *)
              echo "‚ùå Unsupported app version: $VERSION"
              exit 1
              ;;
          esac
          echo "JDK_VERSION=$JDK_VERSION" >> $GITHUB_ENV
          echo "üì¶ App Version: $VERSION ‚Üí JDK Version: $JDK_VERSION"
          echo "jdk_version=$JDK_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'temurin'
          cache: gradle

      - name: Decode keystore
        run: |
          mkdir -p "$RUNNER_TEMP/keystore"
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > "$RUNNER_TEMP/keystore/keystore.jks"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build APKs
        run: |
          ./gradlew assemble${{ env.BUILD_VARIANT }} \
          -Pandroid.injected.signing.store.file="$RUNNER_TEMP/keystore/keystore.jks" \
          -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
          -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
          -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Rename APKs with version
        run: |
          mv app/build/outputs/apk/${{ env.VARIANT_FLAVOR }}/${{ env.VARIANT_TYPE }}/*.apk \
            aaps-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk

          mv wear/build/outputs/apk/${{ env.VARIANT_FLAVOR }}/${{ env.VARIANT_TYPE }}/*.apk \
            aaps-wear-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk

      - name: Upload APKs to Dropbox
        if: ${{ github.event.inputs.uploadTarget }} == "dropbox"
        run: |
          RESPONSE=$(curl -s -X POST https://api.dropbox.com/oauth2/token \
            -u "${{ secrets.DROPBOX_APP_KEY }}:${{ secrets.DROPBOX_APP_SECRET }}" \
            -d grant_type=refresh_token \
            -d refresh_token=${{ secrets.DROPBOX_REFRESH_TOKEN }})

          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r .access_token)
          echo "::add-mask::$ACCESS_TOKEN"
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_ENV
        
          upload_to_dropbox() {
            FILE_PATH=$1
            DROPBOX_DEST=$2
            if [ ! -f "$FILE_PATH" ]; then
              echo "‚ùå File not found: $FILE_PATH"
              exit 1
            fi
            echo "‚¨ÜÔ∏è Uploading $FILE_PATH to Dropbox as $DROPBOX_DEST..."
            RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/response.json \
              -X POST https://content.dropboxapi.com/2/files/upload \
              --header "Authorization: Bearer $ACCESS_TOKEN" \
              --header "Dropbox-API-Arg: {\"path\": \"/$DROPBOX_DEST\",\"mode\": \"overwrite\",\"autorename\": false,\"mute\": false}" \
              --header "Content-Type: application/octet-stream" \
              --data-binary @"$FILE_PATH")
            HTTP_CODE="${RESPONSE: -3}"
            if [[ "$HTTP_CODE" != "200" ]]; then
              echo "‚ùå Upload failed with HTTP status: $HTTP_CODE"
              cat /tmp/response.json
              exit 1
            fi
            echo "‚úÖ Upload successful: $DROPBOX_DEST"
          }
          upload_to_dropbox "aaps-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk" "${{ env.VERSION }}/aaps-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk"
          upload_to_dropbox "aaps-wear-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk" "${{ env.VERSION }}/aaps-wear-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}.apk"

      - name: Prepare encrypted ZIP for artifact upload
        if: ${{ github.event.inputs.uploadTarget == 'artifacts' }}
        env:
          VERSION: ${{ env.VERSION }}
          VERSION_SUFFIX: ${{ env.VERSION_SUFFIX }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          set -e
          echo "üì¶ Preparing encrypted APK ZIP for artifact..."

          app_path="aaps-$VERSION$VERSION_SUFFIX.apk"
          wear_path="aaps-wear-$VERSION$VERSION_SUFFIX.apk"
          artifact_name="aaps-$VERSION$VERSION_SUFFIX"
          zip_name="$artifact_name.zip"
          zip_password="$KEY_PASSWORD"

          echo "Uploading $app_path and $wear_path as $artifact_name"

          mkdir -p artifacts
          cp "$app_path" artifacts/
          cp "$wear_path" artifacts/

          echo "üîê Creating encrypted ZIP..."
          cd artifacts
          zip -P "$zip_password" "$zip_name" *.apk
          cd ..

      - name: Upload encrypted APK zip as GitHub Artifact
        if: ${{ github.event.inputs.uploadTarget == 'artifacts' }}
        uses: actions/upload-artifact@v4
        with:
          name: aaps-${{ env.VERSION }}${{ env.VERSION_SUFFIX }}
          path: artifacts/*.zip
          retention-days: 1

      - name: Upload APKs to Google Drive
        if: ${{ github.event.inputs.uploadTarget == 'google-drive' }}
        env:
          CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.GDRIVE_REFRESH_TOKEN }}
          VERSION: ${{ env.VERSION }}
          VERSION_SUFFIX: ${{ env.VERSION_SUFFIX }}
        run: |
          set -e
          echo "üîê Retrieving Google Drive access token..."
          TOKEN_RESPONSE=$(curl -s -X POST https://oauth2.googleapis.com/token \
            -d client_id="$CLIENT_ID" \
            -d client_secret="$CLIENT_SECRET" \
            -d refresh_token="$REFRESH_TOKEN" \
            -d grant_type=refresh_token)
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r .access_token)
          echo "::add-mask::$ACCESS_TOKEN"

          upload_to_gdrive() {
            FILE=$1
            NAME=$2
            echo "‚¨ÜÔ∏è Uploading $FILE to Google Drive as $NAME..."
            RESPONSE=$(curl -s -X POST https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -F "metadata={name :'$NAME'};type=application/json;charset=UTF-8" \
              -F "file=@$FILE;type=application/vnd.android.package-archive")
            echo "$RESPONSE"
            echo "‚úÖ Upload complete."
          }

          upload_to_gdrive "aaps-${VERSION}${VERSION_SUFFIX}.apk" "aaps-${VERSION}${VERSION_SUFFIX}.apk"
          upload_to_gdrive "aaps-wear-${VERSION}${VERSION_SUFFIX}.apk" "aaps-wear-${VERSION}${VERSION_SUFFIX}.apk"