name: AAPS CI

on:
  workflow_dispatch:
    inputs:
      buildVariant:
        description: 'Select Build Variant'
        required: true
        default: 'FullRelease'
        type: choice
        options:
          - FullRelease
          - FullDebug
          - aapsclientRelease
          - aapsclientDebug
          - aapsclient2Release
          - aapsclient2Debug
          - pumpcontrolRelease
          - pumpcontrolDebug
      uploadTarget:
        description: 'Select Upload Target'
        required: true
        default: 'dropbox'
        type: choice
        options:
          - dropbox

jobs:
  build:
    name: Build AAPS
    runs-on: ubuntu-latest
    steps:
      - name: Check Secrets
        run: |
          MISSING=0
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "❌ Missing secret: KEYSTORE_BASE64"
            MISSING=1
          fi
          if [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ]; then
            echo "❌ Missing secret: KEYSTORE_PASSWORD"
            MISSING=1
          fi
          if [ -z "${{ secrets.KEY_ALIAS }}" ]; then
            echo "❌ Missing secret: KEY_ALIAS"
            MISSING=1
          fi
          if [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "❌ Missing secret: KEY_PASSWORD"
            MISSING=1
          fi

          # Conditionally check Dropbox secret if uploadTool is dropbox
          if [ "${{ github.event.inputs.uploadTool }}" = "dropbox" ]; then
            if [ -z "${{ secrets.DROPBOX_ACCESS_TOKEN }}" ]; then
              echo "❌ Missing secret: DROPBOX_ACCESS_TOKEN (required for Dropbox upload)"
              echo ""
              echo "🔧 Please create an app and generate a token at:"
              echo "👉 https://www.dropbox.com/developers/apps"
              echo ""
              echo "📘 For detailed instructions, see:"
              echo "🔗 https://androidaps.readthedocs.io/en/latest/SettingUpAaps/BuildingAaps.html#upload-to-dropbox"
              MISSING=1
            fi
          fi

          if [ "$MISSING" -eq 1 ]; then
            echo "🛑 One or more required secrets are missing. Failing the build."
            exit 1
          fi

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set BUILD_VARIANT
        id: set_build_variant
        run: |
          BUILD_VARIANT="${{ github.event.inputs.buildVariant }}"
          echo "BUILD_VARIANT=$BUILD_VARIANT" >> $GITHUB_ENV
          echo "Selected BUILD_VARIANT: $BUILD_VARIANT"

          # Split into FLAVOR and TYPE (release/debug)
          VARIANT_FLAVOR=$(echo "$BUILD_VARIANT" | sed -E 's/(Release|Debug)$//' | tr '[:upper:]' '[:lower:]')
          VARIANT_TYPE=$(echo "$BUILD_VARIANT" | grep -oE '(Release|Debug)$' | tr '[:upper:]' '[:lower:]')

          echo "VARIANT_FLAVOR=$VARIANT_FLAVOR" >> $GITHUB_ENV
          echo "VARIANT_TYPE=$VARIANT_TYPE" >> $GITHUB_ENV
          echo "VARIANT_FLAVOR: $VARIANT_FLAVOR"
          echo "VARIANT_TYPE: $VARIANT_TYPE"

          VERSION_SUFFIX=""
          if [[ "$VARIANT_FLAVOR" != "full" ]]; then
            VERSION_SUFFIX="$VARIANT_FLAVOR"
          fi
          if [[ "$VARIANT_TYPE" == "debug" ]]; then
            VERSION_SUFFIX = "$VERSION_SUFFIX-debug"
          fi

          echo "VERSION_SUFFIX=$VERSION_SUFFIX" >> $GITHUB_ENV
          echo "VERSION_SUFFIX: $VERSION_SUFFIX"

      - name: Extract VERSION_NAME for App and Wear
        id: extract_versions
        run: |
          BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
          if echo "$BRANCH_NAME" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$'; then
            VERSION="$BRANCH_NAME"
#            if [[ "${VARIANT_FLAVOR}" != "release" ]]; then
#              VERSION="${APP_VERSION}-${VARIANT_FLAVOR}"
#            fi
#            echo "🔢 Using branch version as version: $BRANCH_NAME"
          else
            VERSION=$(grep 'val appVersion' buildSrc/src/main/kotlin/Versions.kt | awk -F '"' '{print $2}')
          fi 

#          VERSION_DIR=$(echo "$VERSION" | grep -oE '[0-9]+(\.[0-9]+)+')

#          VERSION="$VERSION${VERSION_SUFFIX}"
#          APP_VERSION="$APP_VERSION${VERSION_SUFFIX}"
#          WEAR_VERSION="$WEAR_VERSION${VERSION_SUFFIX}"
               
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

#          echo "app_version_dir=$APP_VERSION_DIR" >> $GITHUB_OUTPUT
#          echo "wear_version_dir=$WEAR_VERSION_DIR" >> $GITHUB_OUTPUT
#          echo "app_version_name=$APP_VERSION" >> $GITHUB_OUTPUT
#          echo "wear_version_name=$WEAR_VERSION" >> $GITHUB_OUTPUT

          echo "VERSION: $VERSION"

#          echo "APP_VERSION_DIR: $APP_VERSION_DIR"
#          echo "WEAR_VERSION_DIR: $WEAR_VERSION_DIR"
#          echo "APP_VERSION: $APP_VERSION"
#          echo "WEAR_VERSION: $WEAR_VERSION"

